cc_library_headers {
    name: "libstagefright_headers",
    export_include_dirs: ["include"],
    vendor_available: true,
}

cc_library_shared {
    name: "libstagefright",

    srcs: [
        "ACodec.cpp",
        "AACExtractor.cpp",
        "AACWriter.cpp",
        "AMRExtractor.cpp",
        "AMRWriter.cpp",
        "AudioPlayer.cpp",
        "AudioSource.cpp",
        "CallbackDataSource.cpp",
        "CameraSource.cpp",
        "CameraSourceTimeLapse.cpp",
        "CodecBase.cpp",
        "DataConverter.cpp",
        "DataSource.cpp",
        "DataURISource.cpp",
        "DRMExtractor.cpp",
        "ESDS.cpp",
        "FileSource.cpp",
        "FLACExtractor.cpp",
        "FrameRenderTracker.cpp",
        "HTTPBase.cpp",
        "HevcUtils.cpp",
        "JPEGSource.cpp",
        "MP3Extractor.cpp",
        "MPEG2TSWriter.cpp",
        "MPEG4Extractor.cpp",
        "MPEG4Writer.cpp",
        "MediaAdapter.cpp",
        "MediaClock.cpp",
        "MediaCodec.cpp",
        "MediaCodecList.cpp",
        "MediaCodecListOverrides.cpp",
        "MediaCodecSource.cpp",
        "MediaExtractor.cpp",
        "MediaSync.cpp",
        "MidiExtractor.cpp",
        "http/MediaHTTP.cpp",
        "MediaMuxer.cpp",
        "MediaSource.cpp",
        "NuCachedSource2.cpp",
        "NuMediaExtractor.cpp",
        "OMXClient.cpp",
        "OggExtractor.cpp",
        "SampleIterator.cpp",
        "SampleTable.cpp",
        "SimpleDecodingSource.cpp",
        "SkipCutBuffer.cpp",
        "StagefrightMediaScanner.cpp",
        "StagefrightMetadataRetriever.cpp",
        "SurfaceMediaSource.cpp",
        "SurfaceUtils.cpp",
        "ThrottledSource.cpp",
        "Utils.cpp",
        "VBRISeeker.cpp",
        "VideoFrameScheduler.cpp",
        "WAVExtractor.cpp",
        "WVMExtractor.cpp",
        "XINGSeeker.cpp",
        "avc_utils.cpp",
    ],

    include_dirs: [
        "frameworks/native/include/media/openmax",
        "frameworks/native/include/media/hardware",
    ],

    shared_libs: [
        "libaudioutils",
        "libbinder",
        "libcamera_client",
        "libcutils",
        "libdl",
        "libdrmframework",
        "libexpat",
        "libgui",
        "liblog",
        "libmedia",
        "libaudioclient",
        "libmediautils",
        "libnetd_client",
        "libsonivox",
        "libstagefright_omx",
        "libui",
        "libutils",
        "libvorbisidec",

        "libstagefright_foundation",
        "libdl",
        "libRScpp",
    ],

    static_libs: [
        "libstagefright_color_conversion",
        "libyuv_static",
        "libstagefright_aacenc",
        "libstagefright_matroska",
        "libstagefright_mediafilter",
        "libstagefright_webm",
        "libstagefright_timedtext",
        "libvpx",
        "libwebm",
        "libstagefright_mpeg2ts",
        "libstagefright_id3",
        "libFLAC",
        "libmedia_helper",
    ],

    export_shared_lib_headers: ["libmedia"],
    export_include_dirs: [
        ".",
        "include",
    ],

    cflags: [
        "-Wno-multichar",
        "-Werror",
        "-Wno-error=deprecated-declarations",
        "-Wall",
    ],

    product_variables: {
        debuggable: {
            // enable experiments only in userdebug and eng builds
            cflags: ["-DENABLE_STAGEFRIGHT_EXPERIMENTS"],
        },
        has_legacy_camera_hal1: {
            // enable legacy camera HAL1 product option
            cflags: ["-DCAMCORDER_GRALLOC_SOURCE"],
        },
    },

    sanitize: {
        misc_undefined: [
            "unsigned-integer-overflow",
            "signed-integer-overflow",
        ],
    },
}

subdirs = [
    "codecs/*",
    "colorconversion",
    "filters",
    "foundation",
    "http",
    "httplive",
    "id3",
    "matroska",
    "mpeg2ts",
    "omx",
    "rtsp",
    "tests",
    "timedtext",
    "webm",
    "wifi-display",
]
